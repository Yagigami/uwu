#ifndef C_AST_EXPRESSION_ENUMS_H
#define C_AST_EXPRESSION_ENUMS_H

enum ExpressionKind {
	EXPRESSION_NONE = 0,
	EXPRESSION_IDENTIFIER,
	EXPRESSION_CONSTANT,
	EXPRESSION_STRING_LITERAL,
	EXPRESSION_POSTFIX,
	EXPRESSION_COMPOUND_LITERAL,
	EXPRESSION_UNARY,
	EXPRESSION_BINARY,
	EXPRESSION_TERNARY,
	EXPRESSION_COMMA,
	EXPRESSION_DEFINED,
	EXPRESSION_NUM,
};

enum Operator {
	OPERATOR_NONE = 0,
	OPERATOR_INDEX,
	OPERATOR_FUNCTION_CALL,
	OPERATOR_FIELD,
	OPERATOR_INDIRECT_FIELD,
	OPERATOR_POST_INCREMENT,
	OPERATOR_POST_DECREMENT,
	OPERATOR_COMPOUND_LITERAL,
	OPERATOR_PRE_INCREMENT,
	OPERATOR_PRE_DECREMENT,
	OPERATOR_ADDRESS_OF,
	OPERATOR_DEREFERENCE,
	OPERATOR_POSITIVE,
	OPERATOR_NEGATIVE,
	OPERATOR_BITWISE_NOT,
	OPERATOR_BOOLEAN_NOT,
	OPERATOR_SIZEOF_EXPRESSION,
	OPERATOR_SIZEOF_TYPE,
	OPERATOR_MULTIPLY,
	OPERATOR_DIVIDE,
	OPERATOR_MODULUS,
	OPERATOR_ADDITION,
	OPERATOR_SUBSTRACTION,
	OPERATOR_LSHIFT,
	OPERATOR_RSHIFT,
	OPERATOR_LOWER,
	OPERATOR_GREATER,
	OPERATOR_LOWER_EQUAL,
	OPERATOR_GREATER_EQUAL,
	OPERATOR_EQUAL,
	OPERATOR_NOT_EQUAL,
	OPERATOR_BITWISE_AND,
	OPERATOR_BITWISE_XOR,
	OPERATOR_BITWISE_OR,
	OPERATOR_BOOLEAN_AND,
	OPERATOR_BOOLEAN_OR,
	OPERATOR_TERNARY_CONDITIONAL,
	OPERATOR_ASSIGN,
	OPERATOR_MULTIPLY_ASSIGN,
	OPERATOR_DIVIDE_ASSIGN,
	OPERATOR_MODULUS_ASSIGN,
	OPERATOR_ADDITION_ASSIGN,
	OPERATOR_SUBSTRACTION_ASSIGN,
	OPERATOR_LSHIFT_ASSIGN,
	OPERATOR_RSHIFT_ASSIGN,
	OPERATOR_BITWISE_AND_ASSIGN,
	OPERATOR_BITWISE_XOR_ASSIGN,
	OPERATOR_BITWISE_OR_ASSIGN,
	OPERATOR_COMMA,
	OPERATOR_NUM,
};

enum InitializerKind {
	INITIALIZER_NONE = 0,
	INITIALIZER_EXPRESSION,
	INITIALIZER_INITIALIZER_LIST,
	INITIALIZER_NUM,
};

#endif /* C_AST_EXPRESSION_ENUMS_H */

