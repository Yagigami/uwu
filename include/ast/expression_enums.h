#ifndef C_AST_EXPRESSION_ENUMS_H
#define C_AST_EXPRESSION_ENUMS_H

enum ExpressionKind {
	EXPRESSION_NONE = 0,
	EXPRESSION_IDENTIFIER,
	EXPRESSION_CONSTANT,
	EXPRESSION_STRING_LITERAL,
	EXPRESSION_POSTFIX,
	EXPRESSION_COMPOUND_LITERAL,
	EXPRESSION_UNARY,
	EXPRESSION_BINARY,
	EXPRESSION_TERNARY,
	EXPRESSION_COMMA,
	EXPRESSION_DEFINED,
	EXPRESSION_NUM,
};

enum Operator {
	OPERATOR_NONE = 0,
	OPERATOR_INDEX,
	OPERATOR_CALL,
	OPERATOR_FIELD,
	OPERATOR_ARROW,
	OPERATOR_POST_INC,
	OPERATOR_POST_DEC,
	OPERATOR_COMPOUND,
	OPERATOR_PRE_INC,
	OPERATOR_PRE_DEC,
	OPERATOR_ADDRESS_OF,
	OPERATOR_DEREF,
	OPERATOR_UN_PLUS,
	OPERATOR_UN_MINUS,
	OPERATOR_BIT_NOT,
	OPERATOR_LOGICAL_NOT,
	OPERATOR_SIZEOF_EXPR,
	OPERATOR_SIZEOF_TYPE,
	OPERATOR_MUL,
	OPERATOR_DIV,
	OPERATOR_MOD,
	OPERATOR_ADD,
	OPERATOR_SUB,
	OPERATOR_LSHIFT,
	OPERATOR_RSHIFT,
	OPERATOR_LOWER,
	OPERATOR_GREATER,
	OPERATOR_LEQUAL,
	OPERATOR_GEQUAL,
	OPERATOR_EQUAL,
	OPERATOR_NEQUAL,
	OPERATOR_BIT_AND,
	OPERATOR_BIT_XOR,
	OPERATOR_BIT_OR,
	OPERATOR_LOGICAL_AND,
	OPERATOR_LOGICAL_OR,
	OPERATOR_TERNARY,
	OPERATOR_ASSIGN,
	OPERATOR_MUL_ASSIGN,
	OPERATOR_DIV_ASSIGN,
	OPERATOR_MOD_ASSIGN,
	OPERATOR_ADD_ASSIGN,
	OPERATOR_SUB_ASSIGN,
	OPERATOR_LSHIFT_ASSIGN,
	OPERATOR_RSHIFT_ASSIGN,
	OPERATOR_BIT_AND_ASSIGN,
	OPERATOR_BIT_XOR_ASSIGN,
	OPERATOR_BIT_OR_ASSIGN,
	OPERATOR_COMMA,
	OPERATOR_NUM,
};

enum InitializerKind {
	INITIALIZER_NONE = 0,
	INITIALIZER_EXPRESSION,
	INITIALIZER_INITIALIZER_LIST,
	INITIALIZER_NUM,
};

#endif /* C_AST_EXPRESSION_ENUMS_H */

